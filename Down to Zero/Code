#include <bits/stdc++.h>
using namespace std;

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), [](int c) { return !isspace(c); })
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), [](int c) { return !isspace(c); }).base(),
        s.end()
    );

    return s;
}

vector<int> precomputeMinSteps(int max_n) {
    vector<int> dp(max_n + 1, 0);
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= max_n; ++i) {
        dp[i] = dp[i - 1] + 1;
        for (int j = 2; j * j <= i; ++j) {
            if (i % j == 0) {
                dp[i] = min(dp[i], dp[max(j, i / j)] + 1);
            }
        }
    }
    return dp;
}

int downToZero(int n, const vector<int>& dp) {
    return dp[n];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int max_n = 1e6;
    vector<int> dp = precomputeMinSteps(max_n);

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string n_temp;
        getline(cin, n_temp);

        int n = stoi(ltrim(rtrim(n_temp)));

        int result = downToZero(n, dp);

        cout << result << '\n';
    }

    return 0;
}
