#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

vector<int> parent;
vector<int> component_size;

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

// Union operation by size
void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b) { // If they are in different sets
        // Always attach smaller tree under root of larger tree
        if (component_size[a] < component_size[b])
            swap(a, b);
        parent[b] = a;
        component_size[a] += component_size[b]; // Update size of the new combined set
    }
}
vector<int> componentsInGraph(vector<vector<int>> gb) {
    int max_node_val = 0;
    for (const auto& edge : gb) {
        max_node_val = max(max_node_val, edge[0]);
        max_node_val = max(max_node_val, edge[1]);
    }
    parent.resize(max_node_val + 1);
    iota(parent.begin(), parent.end(), 0); // parent[i] = i for all i

    component_size.resize(max_node_val + 1);
    fill(component_size.begin(), component_size.end(), 1); // Each component initially has size 1

    for (const auto& edge : gb) {
        union_sets(edge[0], edge[1]);
    }

    int min_comp_size = INT_MAX;
    int max_comp_size = INT_MIN;

    for (int i = 1; i <= max_node_val; ++i) {
        if (parent[i] == i) { // If 'i' is a representative (root) of a set
            if (component_size[i] > 1) { // Exclude single nodes
                min_comp_size = min(min_comp_size, component_size[i]);
                max_comp_size = max(max_comp_size, component_size[i]);
            }
        }
    }

    return {min_comp_size, max_comp_size};
}


int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    vector<vector<int>> gb(n);

    for (int i = 0; i < n; i++) {
        gb[i].resize(2);

        string gb_row_temp_temp;
        getline(cin, gb_row_temp_temp);

        vector<string> gb_row_temp = split(rtrim(gb_row_temp_temp));

        for (int j = 0; j < 2; j++) {
            int gb_row_item = stoi(gb_row_temp[j]);

            gb[i][j] = gb_row_item;
        }
    }

    vector<int> result = componentsInGraph(gb);

    for (size_t i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << " ";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), [](unsigned char c) { return !isspace(c); })
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), [](unsigned char c) { return !isspace(c); }).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}

