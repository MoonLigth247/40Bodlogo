#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

struct TrieNode {
    map<char, TrieNode*> children;
    int count; // Number of words that pass through this node

    TrieNode() : count(0) {}

    // Destructor to free memory (important for C++ pointers)
    ~TrieNode() {
        for (auto const& [key, val] : children) {
            delete val;
        }
    }
};

void addContact(TrieNode* root, const string& name) {
    TrieNode* current = root;
    for (char ch : name) {
        if (current->children.find(ch) == current->children.end()) {
            current->children[ch] = new TrieNode();
        }
        current = current->children[ch];
        current->count++; // Increment count for all prefixes
    }
}

int findContacts(TrieNode* root, const string& partial) {
    TrieNode* current = root;
    for (char ch : partial) {
        if (current->children.find(ch) == current->children.end()) {
            return 0; // Prefix not found
        }
        current = current->children[ch];
    }
    return current->count; // Return the count at the end of the prefix
}
vector<int> contacts(vector<vector<string>> queries) {
    vector<int> results;
    TrieNode* root = new TrieNode(); // Create the root of the Trie

    for (const auto& query : queries) {
        string operation = query[0];
        string value = query[1];

        if (operation == "add") {
            addContact(root, value);
        } else if (operation == "find") {
            results.push_back(findContacts(root, value));
        }
    }

    // Free the allocated Trie memory
    delete root;

    return results;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string queries_rows_temp;
    getline(cin, queries_rows_temp);

    int queries_rows = stoi(ltrim(rtrim(queries_rows_temp)));

    vector<vector<string>> queries(queries_rows);

    for (int i = 0; i < queries_rows; i++) {
        queries[i].resize(2);

        string queries_row_temp_temp;
        getline(cin, queries_row_temp_temp);

        vector<string> queries_row_temp = split(rtrim(queries_row_temp_temp));

        for (int j = 0; j < 2; j++) {
            string queries_row_item = queries_row_temp[j];

            queries[i][j] = queries_row_item;
        }
    }

    vector<int> result = contacts(queries);

    for (size_t i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), [](unsigned char c) { return !isspace(c); })
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), [](unsigned char c) { return !isspace(c); }).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
