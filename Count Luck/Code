#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

struct Point {
    int x, y;
    int junctions;
};

string countLuck(vector<string> matrix, int k) {
    int n = matrix.size();
    if (n == 0) return "Oops!";
    int m = matrix[0].size();
    Point start, exit;
    bool foundStart = false, foundExit = false;
    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (matrix[i][j] == 'M') {
                start.x = i;
                start.y = j;
                start.junctions = 0;
                foundStart = true;
            } else if (matrix[i][j] == '*') {
                exit.x = i;
                exit.y = j;
                foundExit = true;
            }
        }
    }
    
    if (!foundStart || !foundExit) return "Oops!";
    
    // Directions: up, down, left, right
    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};
    
    queue<Point> q;
    q.push(start);
    vector<vector<bool>> visited(n, vector<bool>(m, false));
    visited[start.x][start.y] = true;
    
    while (!q.empty()) {
        Point current = q.front();
        q.pop();
        
        if (current.x == exit.x && current.y == exit.y) {
            if (current.junctions == k) {
                return "Impressed";
            } else {
                return "Oops!";
            }
        }
        
        int validMoves = 0;
        vector<Point> nextPoints;
        for (int i = 0; i < 4; ++i) {
            int nx = current.x + dx[i];
            int ny = current.y + dy[i];
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && matrix[nx][ny] != 'X' && !visited[nx][ny]) {
                validMoves++;
                nextPoints.push_back({nx, ny, current.junctions});
            }
        }
        
        if (validMoves > 1) {
            for (auto &point : nextPoints) {
                point.junctions = current.junctions + 1;
            }
        }
        
        for (auto &point : nextPoints) {
            visited[point.x][point.y] = true;
            q.push(point);
        }
    }
    
    return "Oops!";
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string t_temp;
    getline(cin, t_temp);

    int t = stoi(ltrim(rtrim(t_temp)));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string first_multiple_input_temp;
        getline(cin, first_multiple_input_temp);

        vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

        int n = stoi(first_multiple_input[0]);

        int m = stoi(first_multiple_input[1]);

        vector<string> matrix(n);

        for (int i = 0; i < n; i++) {
            string matrix_item;
            getline(cin, matrix_item);

            matrix[i] = matrix_item;
        }

        string k_temp;
        getline(cin, k_temp);

        int k = stoi(ltrim(rtrim(k_temp)));

        string result = countLuck(matrix, k);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
