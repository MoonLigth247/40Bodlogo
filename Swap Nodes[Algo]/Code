#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

struct Node {
    int data;
    Node* left;
    Node* right;
    int depth;

    Node(int val) : data(val), left(nullptr), right(nullptr), depth(0) {}
};

Node* buildTree(const vector<vector<int>>& indexes) {
    if (indexes.empty()) {
        return nullptr;
    }

    Node* root = new Node(1);
    root->depth = 1;

    queue<Node*> q;
    q.push(root);

    int i = 0;
    while (!q.empty() && i < indexes.size()) {
        Node* current_node = q.front();
        q.pop();

        int left_child_idx = indexes[i][0];
        int right_child_idx = indexes[i][1];

        if (left_child_idx != -1) {
            current_node->left = new Node(left_child_idx);
            current_node->left->depth = current_node->depth + 1;
            q.push(current_node->left);
        }

        if (right_child_idx != -1) {
            current_node->right = new Node(right_child_idx);
            current_node->right->depth = current_node->depth + 1;
            q.push(current_node->right);
        }
        i++;
    }
    return root;
}

void inOrderTraversal(Node* node, vector<int>& result) {
    if (node == nullptr) {
        return;
    }
    inOrderTraversal(node->left, result);
    result.push_back(node->data);
    inOrderTraversal(node->right, result);
}

vector<vector<int>> swapNodes(vector<vector<int>> indexes, vector<int> queries) {
    vector<vector<int>> results;

    Node* root = buildTree(indexes);

    for (int k : queries) {
        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            Node* current_node = q.front();
            q.pop();

            if (current_node->depth % k == 0) {
                Node* temp = current_node->left;
                current_node->left = current_node->right;
                current_node->right = temp;
            }

            if (current_node->left != nullptr) {
                q.push(current_node->left);
            }
            if (current_node->right != nullptr) {
                q.push(current_node->right);
            }
        }

        vector<int> current_inorder_traversal;
        inOrderTraversal(root, current_inorder_traversal);
        results.push_back(current_inorder_traversal);
    }
    return results;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    vector<vector<int>> indexes(n);

    for (int i = 0; i < n; i++) {
        indexes[i].resize(2);

        string indexes_row_temp_temp;
        getline(cin, indexes_row_temp_temp);

        vector<string> indexes_row_temp = split(rtrim(indexes_row_temp_temp));

        for (int j = 0; j < 2; j++) {
            int indexes_row_item = stoi(indexes_row_temp[j]);

            indexes[i][j] = indexes_row_item;
        }
    }

    string queries_count_temp;
    getline(cin, queries_count_temp);

    int queries_count = stoi(ltrim(rtrim(queries_count_temp)));

    vector<int> queries(queries_count);

    for (int i = 0; i < queries_count; i++) {
        string queries_item_temp;
        getline(cin, queries_item_temp);

        int queries_item = stoi(ltrim(rtrim(queries_item_temp)));

        queries[i] = queries_item;
    }

    vector<vector<int>> result = swapNodes(indexes, queries);

    for (size_t i = 0; i < result.size(); i++) {
        for (size_t j = 0; j < result[i].size(); j++) {
            fout << result[i][j];

            if (j != result[i].size() - 1) {
                fout << " ";
            }
        }

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), [](unsigned char c) { return !isspace(c); }) // Use unsigned char for isspace
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), [](unsigned char c) { return !isspace(c); }).base(), // Use unsigned char for isspace
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
