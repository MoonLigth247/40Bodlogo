#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

int minimumMoves(vector<string> grid, int startX, int startY, int goalX, int goalY) {
    int n = grid.size();

    vector<vector<int>> dist(n, vector<int>(n, -1));

    queue<pair<int, int>> q;

    q.push({startX, startY});
    dist[startX][startY] = 0;

    while (!q.empty()) {
        pair<int, int> current_pos = q.front();
        q.pop();

        int r = current_pos.first;
        int c = current_pos.second;
        int current_moves = dist[r][c];

        // If we reached the goal, return the moves
        if (r == goalX && c == goalY) {
            return current_moves;
        }

        for (int newR = r - 1; newR >= 0; --newR) {
            if (grid[newR][c] == 'X') { // Blocked cell
                break;
            }
            if (dist[newR][c] == -1) { // Unvisited
                dist[newR][c] = current_moves + 1;
                q.push({newR, c});
            }
        }
        for (int newR = r + 1; newR < n; ++newR) {
            if (grid[newR][c] == 'X') { // Blocked cell
                break;
            }
            if (dist[newR][c] == -1) { // Unvisited
                dist[newR][c] = current_moves + 1;
                q.push({newR, c});
            }
        }

        for (int newC = c - 1; newC >= 0; --newC) {
            if (grid[r][newC] == 'X') { // Blocked cell
                break;
            }
            if (dist[r][newC] == -1) { // Unvisited
                dist[r][newC] = current_moves + 1;
                q.push({r, newC});
            }
        }
        for (int newC = c + 1; newC < n; ++newC) {
            if (grid[r][newC] == 'X') { // Blocked cell
                break;
            }
            if (dist[r][newC] == -1) { // Unvisited
                dist[r][newC] = current_moves + 1;
                q.push({r, newC});
            }
        }
    }

    return -1; // No path found
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    vector<string> grid(n);

    for (int i = 0; i < n; i++) {
        string grid_item;
        getline(cin, grid_item);

        grid[i] = grid_item;
    }

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int startX = stoi(first_multiple_input[0]);

    int startY = stoi(first_multiple_input[1]);

    int goalX = stoi(first_multiple_input[2]);

    int goalY = stoi(first_multiple_input[3]);

    int result = minimumMoves(grid, startX, startY, goalX, goalY);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), [](unsigned char c) { return !isspace(c); })
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), [](unsigned char c) { return !isspace(c); }).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
